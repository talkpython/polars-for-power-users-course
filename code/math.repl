>>> import polars as pl
>>> data = {
...     "num": range(1, 1001),
...     "double": [x*2 for x in range(1, 1001)],
...     "triple": [x*3 for x in range(1, 1001)],
... }
>>> values = pl.DataFrame(data)
>>> values
shape: (1_000, 3)
┌──────┬────────┬────────┐
│ num  ┆ double ┆ triple │
│ ---  ┆ ---    ┆ ---    │
│ i64  ┆ i64    ┆ i64    │
╞══════╪════════╪════════╡
│ 1    ┆ 2      ┆ 3      │
│ 2    ┆ 4      ┆ 6      │
│ 3    ┆ 6      ┆ 9      │
│ 4    ┆ 8      ┆ 12     │
│ 5    ┆ 10     ┆ 15     │
│ …    ┆ …      ┆ …      │
│ 996  ┆ 1992   ┆ 2988   │
│ 997  ┆ 1994   ┆ 2991   │
│ 998  ┆ 1996   ┆ 2994   │
│ 999  ┆ 1998   ┆ 2997   │
│ 1000 ┆ 2000   ┆ 3000   │
└──────┴────────┴────────┘
>>> values.head()
shape: (5, 3)
┌─────┬────────┬────────┐
│ num ┆ double ┆ triple │
│ --- ┆ ---    ┆ ---    │
│ i64 ┆ i64    ┆ i64    │
╞═════╪════════╪════════╡
│ 1   ┆ 2      ┆ 3      │
│ 2   ┆ 4      ┆ 6      │
│ 3   ┆ 6      ┆ 9      │
│ 4   ┆ 8      ┆ 12     │
│ 5   ┆ 10     ┆ 15     │
└─────┴────────┴────────┘
>>> values.select("num", quad=pl.col("num") * 4)
shape: (1_000, 2)
┌──────┬──────┐
│ num  ┆ quad │
│ ---  ┆ ---  │
│ i64  ┆ i64  │
╞══════╪══════╡
│ 1    ┆ 4    │
│ 2    ┆ 8    │
│ 3    ┆ 12   │
│ 4    ┆ 16   │
│ 5    ┆ 20   │
│ …    ┆ …    │
│ 996  ┆ 3984 │
│ 997  ┆ 3988 │
│ 998  ┆ 3992 │
│ 999  ┆ 3996 │
│ 1000 ┆ 4000 │
└──────┴──────┘
>>> values.select("num", pl.col("num") * 4)
Traceback (most recent call last):
  File "<python-input-6>", line 1, in <module>
    values.select("num", pl.col("num") * 4)
    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/TP/lib/python3.13/site-packages/polars/dataframe/frame.py", line 9632, in select
    return self.lazy().select(*exprs, **named_exprs).collect(_eager=True)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users//TP/lib/python3.13/site-packages/polars/lazyframe/frame.py", line 2065, in collect
    return wrap_df(ldf.collect(callback))
                   ~~~~~~~~~~~^^^^^^^^^^
polars.exceptions.DuplicateError: the name 'num' is duplicate

It is possible that multiple expressions are returning the same default column name. If this is the case, try renaming the columns with `.alias("new_name")` to avoid duplicate column names.
>>> values.select("num", (pl.col("num") * 4).alias("quad"))
shape: (1_000, 2)
┌──────┬──────┐
│ num  ┆ quad │
│ ---  ┆ ---  │
│ i64  ┆ i64  │
╞══════╪══════╡
│ 1    ┆ 4    │
│ 2    ┆ 8    │
│ 3    ┆ 12   │
│ 4    ┆ 16   │
│ 5    ┆ 20   │
│ …    ┆ …    │
│ 996  ┆ 3984 │
│ 997  ┆ 3988 │
│ 998  ┆ 3992 │
│ 999  ┆ 3996 │
│ 1000 ┆ 4000 │
└──────┴──────┘
>>> # Doing some math
>>> from math import sqrt
>>> sqrt(25)
5.0
>>> values.select(sqrt(pl.col("num")))
Traceback (most recent call last):
  File "<python-input-11>", line 1, in <module>
    values.select(sqrt(pl.col("num")))
                  ~~~~^^^^^^^^^^^^^^^
TypeError: must be real number, not Expr
>>> values.select(pl.col("num").sqrt())
shape: (1_000, 1)
┌───────────┐
│ num       │
│ ---       │
│ f64       │
╞═══════════╡
│ 1.0       │
│ 1.414214  │
│ 1.732051  │
│ 2.0       │
│ 2.236068  │
│ …         │
│ 31.559468 │
│ 31.575307 │
│ 31.591138 │
│ 31.606961 │
│ 31.622777 │
└───────────┘
>>> values.select(pl.col("num").sum())
shape: (1, 1)
┌────────┐
│ num    │
│ ---    │
│ i64    │
╞════════╡
│ 500500 │
└────────┘
>>> values.sum()
shape: (1, 3)
┌────────┬─────────┬─────────┐
│ num    ┆ double  ┆ triple  │
│ ---    ┆ ---     ┆ ---     │
│ i64    ┆ i64     ┆ i64     │
╞════════╪═════════╪═════════╡
│ 500500 ┆ 1001000 ┆ 1501500 │
└────────┴─────────┴─────────┘
>>> values.mean()
shape: (1, 3)
┌───────┬────────┬────────┐
│ num   ┆ double ┆ triple │
│ ---   ┆ ---    ┆ ---    │
│ f64   ┆ f64    ┆ f64    │
╞═══════╪════════╪════════╡
│ 500.5 ┆ 1001.0 ┆ 1501.5 │
└───────┴────────┴────────┘
>>> values.count()
shape: (1, 3)
┌──────┬────────┬────────┐
│ num  ┆ double ┆ triple │
│ ---  ┆ ---    ┆ ---    │
│ u32  ┆ u32    ┆ u32    │
╞══════╪════════╪════════╡
│ 1000 ┆ 1000   ┆ 1000   │
└──────┴────────┴────────┘
>>> values.max()
shape: (1, 3)
┌──────┬────────┬────────┐
│ num  ┆ double ┆ triple │
│ ---  ┆ ---    ┆ ---    │
│ i64  ┆ i64    ┆ i64    │
╞══════╪════════╪════════╡
│ 1000 ┆ 2000   ┆ 3000   │
└──────┴────────┴────────┘
>>> values.min()
shape: (1, 3)
┌─────┬────────┬────────┐
│ num ┆ double ┆ triple │
│ --- ┆ ---    ┆ ---    │
│ i64 ┆ i64    ┆ i64    │
╞═════╪════════╪════════╡
│ 1   ┆ 2      ┆ 3      │
└─────┴────────┴────────┘
>>> values.max_horizontal()
shape: (1_000,)
Series: 'max' [i64]
[
    3
    6
    9
    12
    15
    …
    2988
    2991
    2994
    2997
    3000
]
>>> values.min_horizontal()
shape: (1_000,)
Series: 'min' [i64]
[
    1
    2
    3
    4
    5
    …
    996
    997
    998
    999
    1000
]
>>> values.sum_horizontal()
shape: (1_000,)
Series: 'sum' [i64]
[
    6
    12
    18
    24
    30
    …
    5976
    5982
    5988
    5994
    6000
]
>>> # What's a Series?
>>> quad = pl.Series("quad", [x*4 for x in range(1, 1001)])
>>> quad
shape: (1_000,)
Series: 'quad' [i64]
[
    4
    8
    12
    16
    20
    …
    3984
    3988
    3992
    3996
    4000
]
>>> values = values.with_columns(quad)
>>> values
shape: (1_000, 4)
┌──────┬────────┬────────┬──────┐
│ num  ┆ double ┆ triple ┆ quad │
│ ---  ┆ ---    ┆ ---    ┆ ---  │
│ i64  ┆ i64    ┆ i64    ┆ i64  │
╞══════╪════════╪════════╪══════╡
│ 1    ┆ 2      ┆ 3      ┆ 4    │
│ 2    ┆ 4      ┆ 6      ┆ 8    │
│ 3    ┆ 6      ┆ 9      ┆ 12   │
│ 4    ┆ 8      ┆ 12     ┆ 16   │
│ 5    ┆ 10     ┆ 15     ┆ 20   │
│ …    ┆ …      ┆ …      ┆ …    │
│ 996  ┆ 1992   ┆ 2988   ┆ 3984 │
│ 997  ┆ 1994   ┆ 2991   ┆ 3988 │
│ 998  ┆ 1996   ┆ 2994   ┆ 3992 │
│ 999  ┆ 1998   ┆ 2997   ┆ 3996 │
│ 1000 ┆ 2000   ┆ 3000   ┆ 4000 │
└──────┴────────┴────────┴──────┘
>>> triple = values.to_series(2)
>>> triple
shape: (1_000,)
Series: 'triple' [i64]
[
    3
    6
    9
    12
    15
    …
    2988
    2991
    2994
    2997
    3000
]
>>> triple.min()
3
>>> triple.max()
3000
>>> triple.sum()
1501500
>>> triple.mean()
1501.5
>>> triple.index_of(15)
4
>>> triple.reverse()
shape: (1_000,)
Series: 'triple' [i64]
[
    3000
    2997
    2994
    2991
    2988
    …
    15
    12
    9
    6
    3
]
>>> # Unique values
>>> triple.is_unique()
shape: (1_000,)
Series: 'triple' [bool]
[
    true
    true
    true
    true
    true
    …
    true
    true
    true
    true
    true
]
>>> triple.unique_counts()
shape: (1_000,)
Series: 'triple' [u32]
[
    1
    1
    1
    1
    1
    …
    1
    1
    1
    1
    1
]
>>> values = values.with_columns(pl.col("num").alias("mod10") % 10)
>>> values
shape: (1_000, 5)
┌──────┬────────┬────────┬──────┬───────┐
│ num  ┆ double ┆ triple ┆ quad ┆ mod10 │
│ ---  ┆ ---    ┆ ---    ┆ ---  ┆ ---   │
│ i64  ┆ i64    ┆ i64    ┆ i64  ┆ i64   │
╞══════╪════════╪════════╪══════╪═══════╡
│ 1    ┆ 2      ┆ 3      ┆ 4    ┆ 1     │
│ 2    ┆ 4      ┆ 6      ┆ 8    ┆ 2     │
│ 3    ┆ 6      ┆ 9      ┆ 12   ┆ 3     │
│ 4    ┆ 8      ┆ 12     ┆ 16   ┆ 4     │
│ 5    ┆ 10     ┆ 15     ┆ 20   ┆ 5     │
│ …    ┆ …      ┆ …      ┆ …    ┆ …     │
│ 996  ┆ 1992   ┆ 2988   ┆ 3984 ┆ 6     │
│ 997  ┆ 1994   ┆ 2991   ┆ 3988 ┆ 7     │
│ 998  ┆ 1996   ┆ 2994   ┆ 3992 ┆ 8     │
│ 999  ┆ 1998   ┆ 2997   ┆ 3996 ┆ 9     │
│ 1000 ┆ 2000   ┆ 3000   ┆ 4000 ┆ 0     │
└──────┴────────┴────────┴──────┴───────┘
>>> values.select(pl.col("mod10").n_unique())
shape: (1, 1)
┌───────┐
│ mod10 │
│ ---   │
│ u32   │
╞═══════╡
│ 10    │
└───────┘
>>> values.select(pl.col("mod10").value_counts())
shape: (10, 1)
┌───────────┐
│ mod10     │
│ ---       │
│ struct[2] │
╞═══════════╡
│ {8,100}   │
│ {0,100}   │
│ {5,100}   │
│ {6,100}   │
│ {9,100}   │
│ {7,100}   │
│ {3,100}   │
│ {4,100}   │
│ {1,100}   │
│ {2,100}   │
└───────────┘
>>> values.select(pl.col("mod10").value_counts(normalize=True))
shape: (10, 1)
┌───────────┐
│ mod10     │
│ ---       │
│ struct[2] │
╞═══════════╡
│ {9,0.1}   │
│ {6,0.1}   │
│ {1,0.1}   │
│ {7,0.1}   │
│ {4,0.1}   │
│ {0,0.1}   │
│ {5,0.1}   │
│ {2,0.1}   │
│ {3,0.1}   │
│ {8,0.1}   │
└───────────┘
>>> values.select(pl.col("mod10").alias("unique").unique(), pl.col("mod10").alias("unique_count").unique_counts())
shape: (10, 2)
┌────────┬──────────────┐
│ unique ┆ unique_count │
│ ---    ┆ ---          │
│ i64    ┆ u32          │
╞════════╪══════════════╡
│ 0      ┆ 100          │
│ 1      ┆ 100          │
│ 2      ┆ 100          │
│ 3      ┆ 100          │
│ 4      ┆ 100          │
│ 5      ┆ 100          │
│ 6      ┆ 100          │
│ 7      ┆ 100          │
│ 8      ┆ 100          │
│ 9      ┆ 100          │
└────────┴──────────────┘
